//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace DM.Web.SL.Common.Service
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "CommondService.ICommandService")]
    public interface ICommandService
    {

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/ICommandService/Invoke", ReplyAction = "http://tempuri.org/ICommandService/InvokeResponse")]
        System.IAsyncResult BeginInvoke(string request, System.AsyncCallback callback, object asyncState);

        string EndInvoke(System.IAsyncResult result);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandServiceChannel : DM.Web.SL.Common.Service.ICommandService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public InvokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandServiceClient : System.ServiceModel.ClientBase<DM.Web.SL.Common.Service.ICommandService>, DM.Web.SL.Common.Service.ICommandService
    {

        private BeginOperationDelegate onBeginInvokeDelegate;

        private EndOperationDelegate onEndInvokeDelegate;

        private System.Threading.SendOrPostCallback onInvokeCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public CommandServiceClient()
        {
        }

        public CommandServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public CommandServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public CommandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public CommandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }

        public event System.EventHandler<InvokeCompletedEventArgs> InvokeCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DM.Web.SL.Common.Service.ICommandService.BeginInvoke(string request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginInvoke(request, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DM.Web.SL.Common.Service.ICommandService.EndInvoke(System.IAsyncResult result)
        {
            return base.Channel.EndInvoke(result);
        }

        private System.IAsyncResult OnBeginInvoke(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string request = ((string)(inValues[0]));
            return ((DM.Web.SL.Common.Service.ICommandService)(this)).BeginInvoke(request, callback, asyncState);
        }

        private object[] OnEndInvoke(System.IAsyncResult result)
        {
            string retVal = ((DM.Web.SL.Common.Service.ICommandService)(this)).EndInvoke(result);
            return new object[] {
                    retVal};
        }

        private void OnInvokeCompleted(object state)
        {
            if ((this.InvokeCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeCompleted(this, new InvokeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void InvokeAsync(string request)
        {
            this.InvokeAsync(request, null);
        }

        public void InvokeAsync(string request, object userState)
        {
            if ((this.onBeginInvokeDelegate == null))
            {
                this.onBeginInvokeDelegate = new BeginOperationDelegate(this.OnBeginInvoke);
            }
            if ((this.onEndInvokeDelegate == null))
            {
                this.onEndInvokeDelegate = new EndOperationDelegate(this.OnEndInvoke);
            }
            if ((this.onInvokeCompletedDelegate == null))
            {
                this.onInvokeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeDelegate, new object[] {
                        request}, this.onEndInvokeDelegate, this.onInvokeCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override DM.Web.SL.Common.Service.ICommandService CreateChannel()
        {
            return new CommandServiceClientChannel(this);
        }

        private class CommandServiceClientChannel : ChannelBase<DM.Web.SL.Common.Service.ICommandService>, DM.Web.SL.Common.Service.ICommandService
        {

            public CommandServiceClientChannel(System.ServiceModel.ClientBase<DM.Web.SL.Common.Service.ICommandService> client) :
                base(client)
            {
            }

            public System.IAsyncResult BeginInvoke(string request, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Invoke", _args, callback, asyncState);
                return _result;
            }

            public string EndInvoke(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Invoke", _args, result)));
                return _result;
            }
        }
    }
}